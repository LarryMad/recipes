on new 32 bit systems

to get a fast, stable running node

read
https://github.com/rust-lang-nursery/rustfmt

first install via command

cargo install rustfmt-nightly

vor allem anderen, rust ist aber schon drauf, am liebsten die neueste Version 1.18 sollte es immer sein,
1.19 oder neuer bei den beiden letzten Versionen 1.7.x und auch 1.8 war rust in version 1.20 oder größer mit "dabei".

Danach geht das test.sh script leichter durch und die node syncronisiert schneller.

dann passiert, wenn alles richtig läuft- folgendes

Updating registry `https://github.com/rust-lang/crates.io-index`
Downloading rustfmt-nightly v0.2.6
Installing rustfmt-nightly v0.2.6
Downloading strings v0.1.0
Downloading serde_json v1.0.3
Downloading diff v0.1.10
Downloading toml v0.4.5
Downloading serde_derive v1.0.14
Downloading serde v1.0.14
Downloading getopts v0.2.15
Downloading thread_local v0.3.4
Downloading libc v0.2.30
Downloading unreachable v1.0.0
Downloading itoa v0.3.4
Downloading num-traits v0.1.40
Downloading dtoa v0.4.2
Downloading serde_derive_internals v0.16.0
Compiling getopts v0.2.15
Compiling unicode-segmentation v1.2.0
Compiling diff v0.1.10
Compiling lazy_static v0.2.8
Compiling libc v0.2.30
Compiling regex-syntax v0.4.1
Compiling dtoa v0.4.2
Compiling log v0.3.8
Compiling strings v0.1.0
Compiling itoa v0.3.4
Compiling term v0.4.6
Compiling serde v1.0.14
Compiling toml v0.4.5
Compiling unicode-xid v0.0.4
Compiling void v1.0.2
Compiling synom v0.11.3
Compiling rustfmt-nightly v0.2.6
Compiling utf8-ranges v1.0.0
Compiling num-traits v0.1.40
Compiling serde_json v1.0.3
Compiling quote v0.3.15
Compiling unreachable v1.0.0
Compiling thread_local v0.3.4
Compiling syn v0.11.11

danach startet man test.sh

unvorsichtige starten beides gleichzeitig, sind heiß auf neue erleichterte Downsize.doku
haben dann halt bei laufender node 

asus-nb@asusnb-A8F ~/tmp/parity-1.7.0 $ ./test.sh
Compiling base32 v0.3.1
Compiling language-tags v0.2.2
Compiling custom_derive v0.1.7
Compiling winapi v0.2.8
Compiling take v0.1.0
Compiling crossbeam v0.2.10
Compiling target_info v0.1.0
Compiling matches v0.1.2
Compiling linked-hash-map v0.2.1
Compiling bitflags v0.5.0
Compiling unicode-normalization v0.1.2
Compiling smallvec v0.2.1
Compiling glob v0.2.11
   Compiling unicode-width v0.1.4
   Compiling stable_deref_trait v1.0.0
   Compiling base-x v0.2.2
   Compiling backtrace v0.2.3
   Compiling httparse v1.1.2
   Compiling openssl v0.9.13
   Compiling rayon-core v1.0.0
   Compiling multibase v0.6.0
   Compiling either v1.0.2
   Compiling byteorder v0.5.3
   Compiling quote v0.3.10
   Compiling hamming v0.1.3
   Compiling rustc-serialize v0.3.19
   Compiling getopts v0.2.14
   Compiling libc v0.2.21
   Compiling table v0.1.0 (file:///home/asus-nb/tmp/parity-1.7.0/util/table)
   Compiling unicode-segmentation v1.1.0
   Compiling pkg-config v0.3.9
   Compiling untrusted v0.5.0
   Compiling fdlimit v0.1.1
   Compiling isatty v0.1.1
   Compiling atty v0.2.2
   Compiling rand v0.3.14
   Compiling lru-cache v0.1.0
   Compiling itoa v0.3.0
   Compiling bitflags v0.8.2
   Compiling rustc-hex v1.0.0
   Compiling bitflags v0.9.1
   Compiling heapsize v0.4.0
   Compiling iovec v0.1.0
   Compiling strsim v0.6.0
   Compiling spmc v0.2.1
   Compiling scoped-tls v0.1.0
   Compiling rustc-demangle v0.1.4
   Compiling using_queue v0.1.0 (file:///home/asus-nb/tmp/parity-1.7.0/util/usin                                                      g_queue)
   Compiling term_size v0.3.0
   Compiling term v0.4.5
   Compiling primal-bit v0.2.3
   Compiling blastfig v0.3.3
   Compiling odds v0.2.12
   Compiling fnv v1.0.5
   Compiling quick-error v1.1.0
   Compiling unicode-xid v0.0.4
   Compiling log v0.3.7
   Compiling daemonize v0.2.2
   Compiling semver-parser v0.7.0
   Compiling synom v0.11.3
   Compiling deque v0.3.1
   Compiling void v1.0.2
   Compiling stats v0.1.0 (file:///home/asus-nb/tmp/parity-1.7.0/util/stats)
   Compiling cfg-if v0.1.0
   Compiling siphasher v0.1.1
   Compiling lazy_static v0.2.8
   Compiling unreachable v0.1.1
   Compiling winapi-build v0.1.1
   Compiling difference v1.0.0
   Compiling owning_ref v0.3.3
   Compiling net2 v0.2.29
   Compiling ethcore-bloom-journal v0.1.0 (file:///home/asus-nb/tmp/parity-1.7.0                                                      /util/bloom)
   Compiling bitflags v0.7.0
   Compiling integer-encoding v1.0.3
   Compiling kernel32-sys v0.2.2
   Compiling semver v0.6.0
   Compiling ws2_32-sys v0.2.1
   Compiling num-traits v0.1.32
Compiling pretty_assertions v0.1.2
Compiling typeable v0.1.2
Compiling num_cpus v1.2.0
Compiling termios v0.2.2
Compiling path v0.1.0 (file:///home/asus-nb/tmp/parity-1.7.0/util/path)
Compiling serde v1.0.9
Compiling conv v0.3.3
Compiling rpassword v0.2.2
Compiling futures v0.1.11
Compiling rustc_version v0.2.0
Compiling subtle v0.1.0
Compiling num-integer v0.1.32
Compiling ethcore-devtools v1.7.0 (file:///home/asus-nb/tmp/parity-1.7.0/devt                                                      ools)
Compiling vecio v0.1.0
Compiling parity v1.7.0 (file:///home/asus-nb/tmp/parity-1.7.0)
Compiling bigint v3.0.0
Compiling regex-syntax v0.4.0
Compiling pulldown-cmark v0.0.3
Compiling tiny-keccak v1.2.1
Compiling memchr v1.0.1
Compiling aho-corasick v0.6.3
Compiling byteorder v1.0.0
Compiling rayon v0.7.0
Compiling libflate v0.1.9
Compiling sha1 v0.2.0
Compiling itertools v0.5.9
Compiling futures-cpupool v0.1.2
Compiling tokio-service v0.1.0
Compiling num-complex v0.1.32
Compiling num-bigint v0.1.32
Compiling gcc v0.3.51
Compiling parity-wordlist v1.0.1
Compiling bn v0.4.4 (https://github.com/paritytech/bn#b97e95a4)
Compiling elastic-array v0.9.0
Compiling smallvec v0.4.0
Compiling num-rational v0.1.32
Compiling ansi_term v0.9.0
Compiling order-stat v0.1.3
Compiling foreign-types v0.2.0
Compiling semver v0.1.20
Compiling xml-rs v0.3.4
Compiling unicode-bidi v0.2.3
Compiling miow v0.2.1
Compiling ctrlc v1.1.1 (https://github.com/paritytech/rust-ctrlc.git#b5230171)
Compiling time v0.1.35
Compiling bincode v0.8.0
Compiling rustc_version v0.1.7
Compiling toml v0.4.2
Compiling idna v0.1.0
Compiling hyper v0.10.5
Compiling backtrace-sys v0.1.11
Compiling transient-hashmap v0.4.0
Compiling nanomsg-sys v0.5.0 (https://github.com/paritytech/nanomsg.rs.git?branch=parity-1.7#673b79be)
Compiling miniz-sys v0.1.9
Compiling libusb-sys v0.2.3 (https://github.com/paritytech/libusb-sys#c10b1180)
Compiling msdos_time v0.1.4
Compiling eth-secp256k1 v0.5.6 (https://github.com/paritytech/rust-secp256k1#b6b67055)
Compiling ring v0.9.5
Compiling hidapi v0.3.1 (https://github.com/paritytech/hidapi-rs#9a127c1d)
Compiling sha3 v0.1.0 (file:///home/asus-nb/tmp/parity-1.7.0/util/sha3)
Compiling url v1.2.0
Compiling openssl-sys v0.9.13
Compiling unicase v1.4.0
Compiling rust-crypto v0.2.36
Compiling vergen v0.1.0
Compiling phf_shared v0.7.14
Compiling phf_generator v0.7.14
Compiling phf_codegen v0.7.14
Compiling ethcore-util v1.7.0 (file:///home/asus-nb/tmp/parity-1.7.0/util)
Compiling mime_guess v1.6.1
Compiling xmltree v0.3.2
Compiling bytes v0.4.4
Compiling nanomsg v0.5.1 (https://github.com/paritytech/nanomsg.rs.git?branch=parity-1.7#673b79be)
Compiling dtoa v0.4.0
Compiling tokio-io v0.1.1
Compiling rpassword v0.3.0
Compiling nodrop v0.1.9
Compiling arrayvec v0.3.20
Compiling mime v0.2.0
Compiling serde_urlencoded v0.5.1
Compiling cookie v0.3.1
Compiling syntex_pos v0.58.0
Compiling ethcore-bigint v0.1.3 (file:///home/asus-nb/tmp/parity-1.7.0/util/bigint)
Compiling bloomchain v0.1.0
Compiling syntex_errors v0.58.0
Compiling flate2 v0.2.14
Compiling lazycell v0.4.0
Compiling serde_json v1.0.2
Compiling primal-estimate v0.2.1
Compiling primal-sieve v0.2.5
Compiling num-iter v0.1.32
Compiling num v0.1.32
Compiling primal-check v0.2.2
Compiling number_prefix v0.2.5
Compiling linked-hash-map v0.3.0
Compiling multihash v0.6.0
Compiling antidote v1.0.0
Compiling cid v0.2.2
Compiling bit-vec v0.4.3
Compiling bit-set v0.4.0
Compiling rlp v0.2.0 (file:///home/asus-nb/tmp/parity-1.7.0/util/rlp)
Compiling bit-set v0.2.0
Compiling libusb v0.3.0 (https://github.com/paritytech/libusb-rs#47c3d09c)
Compiling primal v0.2.3
Compiling tempdir v0.3.5
Compiling dbghelp-sys v0.2.0
Compiling heck v0.2.0
Compiling phf v0.7.14
Compiling podio v0.1.5
Compiling zip v0.1.18
Compiling base32 v0.3.1
Compiling language-tags v0.2.2
Compiling custom_derive v0.1.7
Compiling winapi v0.2.8
Compiling take v0.1.0
Compiling crossbeam v0.2.10
Compiling target_info v0.1.0
Compiling matches v0.1.2
Compiling linked-hash-map v0.2.1   Compiling smallvec v0.1.8
Compiling rocksdb-sys v0.3.0 (https://github.com/paritytech/rust-rocksdb#4364caec)
Compiling parking_lot_core v0.2.0
Compiling traitobject v0.1.0
Compiling utf8-ranges v1.0.0

Alter verwalter, kommt doch schon richtig was zusammen, wenn man damit die kryptowährungswelt
sauber betreten will.


Sicher ist, daß mit parity auch schon professionelle Kundschaft beliefert wird.
Wer das jetzt im einzelnen ist,erklärt sich von selbst, vermutlich mindestens eine der großen Börsen
und mindestens ein europäisches Bankähliches Haus.
Woher die anderen 4.000 Instanzen im Hauptnetz kommen, vermutlich alle wie meinereiner- Neugierige, die
sich einfach in die "Sache knien" wollen und auch können.

Angenehm in meinen Augen ist das jetzt ein Standard auch bei der ICO Herausgabe zwingend eingehalten werden muß.
Das sichert zwar keinesweges die Qualität der entwickelten Software, stellt das ganze Rechtliche auf eine
verbindlichere Ebene. Diese Ebene ist eben für jede Art von Contract-Studios interessant.

